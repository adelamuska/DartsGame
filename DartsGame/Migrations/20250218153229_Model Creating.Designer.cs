// <auto-generated />
using System;
using DartsGame.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DartsGame.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250218153229_Model Creating")]
    partial class ModelCreating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DartsGame.Entities.Leg", b =>
                {
                    b.Property<Guid>("LegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int>("LegNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("SetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StartingPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LegId");

                    b.HasIndex("SetId");

                    b.HasIndex("StartingPlayerId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Legs");
                });

            modelBuilder.Entity("DartsGame.Entities.LegScore", b =>
                {
                    b.Property<Guid>("LegId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RemainingScore")
                        .HasColumnType("int");

                    b.HasKey("LegId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("LegScores");
                });

            modelBuilder.Entity("DartsGame.Entities.Match", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BestOfSets")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartingScore")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("DartsGame.Entities.Player", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GamesLost")
                        .HasColumnType("int");

                    b.Property<int>("GamesWon")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DartsGame.Entities.PlayerMatch", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlayerId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("PlayerMatches");
                });

            modelBuilder.Entity("DartsGame.Entities.Set", b =>
                {
                    b.Property<Guid>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BestOfLegs")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SetNumber")
                        .HasColumnType("int");

                    b.HasKey("SetId");

                    b.HasIndex("MatchId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("DartsGame.Entities.SetResult", b =>
                {
                    b.Property<Guid>("SetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LegsWon")
                        .HasColumnType("int");

                    b.HasKey("SetId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("SetResults");
                });

            modelBuilder.Entity("DartsGame.Entities.Turn", b =>
                {
                    b.Property<Guid>("TurnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBusted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckoutAttempt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckoutSuccess")
                        .HasColumnType("bit");

                    b.Property<Guid>("LegId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("TurnId");

                    b.HasIndex("LegId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Turns");
                });

            modelBuilder.Entity("DartsGame.Entities.TurnThrow", b =>
                {
                    b.Property<Guid>("TurnThrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Throw1")
                        .HasColumnType("int");

                    b.Property<int>("Throw2")
                        .HasColumnType("int");

                    b.Property<int>("Throw3")
                        .HasColumnType("int");

                    b.Property<Guid>("TurnId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TurnThrowId");

                    b.HasIndex("TurnId");

                    b.ToTable("TurnThrows");
                });

            modelBuilder.Entity("DartsGame.Entities.Leg", b =>
                {
                    b.HasOne("DartsGame.Entities.Set", "Set")
                        .WithMany("Legs")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DartsGame.Entities.Player", "StartingPlayer")
                        .WithMany()
                        .HasForeignKey("StartingPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DartsGame.Entities.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Set");

                    b.Navigation("StartingPlayer");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("DartsGame.Entities.LegScore", b =>
                {
                    b.HasOne("DartsGame.Entities.Leg", "Leg")
                        .WithMany("LegScores")
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DartsGame.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Leg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DartsGame.Entities.PlayerMatch", b =>
                {
                    b.HasOne("DartsGame.Entities.Match", "Match")
                        .WithMany("PlayerMatches")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DartsGame.Entities.Player", "Player")
                        .WithMany("PlayerMatches")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DartsGame.Entities.Set", b =>
                {
                    b.HasOne("DartsGame.Entities.Match", "Match")
                        .WithMany("Sets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("DartsGame.Entities.SetResult", b =>
                {
                    b.HasOne("DartsGame.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DartsGame.Entities.Set", "Set")
                        .WithMany("SetResults")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("DartsGame.Entities.Turn", b =>
                {
                    b.HasOne("DartsGame.Entities.Leg", "Leg")
                        .WithMany("Turns")
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DartsGame.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DartsGame.Entities.TurnThrow", b =>
                {
                    b.HasOne("DartsGame.Entities.Turn", "Turn")
                        .WithMany("TurnThrows")
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("DartsGame.Entities.Leg", b =>
                {
                    b.Navigation("LegScores");

                    b.Navigation("Turns");
                });

            modelBuilder.Entity("DartsGame.Entities.Match", b =>
                {
                    b.Navigation("PlayerMatches");

                    b.Navigation("Sets");
                });

            modelBuilder.Entity("DartsGame.Entities.Player", b =>
                {
                    b.Navigation("PlayerMatches");
                });

            modelBuilder.Entity("DartsGame.Entities.Set", b =>
                {
                    b.Navigation("Legs");

                    b.Navigation("SetResults");
                });

            modelBuilder.Entity("DartsGame.Entities.Turn", b =>
                {
                    b.Navigation("TurnThrows");
                });
#pragma warning restore 612, 618
        }
    }
}
